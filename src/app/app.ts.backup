import { Component, signal } from '@angular/core';
import { IncomeComponent } from './income-component/income-component';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-root',
  imports: [IncomeComponent, CommonModule, FormsModule],
  templateUrl: './app.html',
  styleUrl: './app.css'
})
export class App {
  protected readonly title = signal('Dropdown Demo App');
  
  // Dropdown demo properties
  selectedCountry = signal('');
  selectedColor = signal('');
  selectedFramework = signal('');
  
  // Dropdown options
  countries = [
    { value: 'us', label: 'United States' },
    { value: 'ca', label: 'Canada' },
    { value: 'uk', label: 'United Kingdom' },
    { value: 'de', label: 'Germany' },
    { value: 'fr', label: 'France' },
    { value: 'jp', label: 'Japan' },
    { value: 'au', label: 'Australia' },
    { value: 'in', label: 'India' }
  ];
  
  colors = [
    { value: 'red', label: 'Red' },
    { value: 'blue', label: 'Blue' },
    { value: 'green', label: 'Green' },
    { value: 'yellow', label: 'Yellow' },
    { value: 'purple', label: 'Purple' },
    { value: 'orange', label: 'Orange' }
  ];
  
  frameworks = [
    { value: 'angular', label: 'Angular' },
    { value: 'react', label: 'React' },
    { value: 'vue', label: 'Vue.js' },
    { value: 'svelte', label: 'Svelte' },
    { value: 'nextjs', label: 'Next.js' },
    { value: 'nuxt', label: 'Nuxt.js' }
  ];
  
  // Methods for dropdown changes
  onCountryChange(event: any) {
    this.selectedCountry.set(event.target.value);
  }
  
  onColorChange(event: any) {
    this.selectedColor.set(event.target.value);
  }
  
  onFrameworkChange(event: any) {
    this.selectedFramework.set(event.target.value);
  }
  
  // Get selected labels for display
  getSelectedCountryLabel() {
    const country = this.countries.find(c => c.value === this.selectedCountry());
    return country ? country.label : 'None selected';
  }
  
  getSelectedColorLabel() {
    const color = this.colors.find(c => c.value === this.selectedColor());
    return color ? color.label : 'None selected';
  }
  
  getSelectedFrameworkLabel() {
    const framework = this.frameworks.find(f => f.value === this.selectedFramework());
    return framework ? framework.label : 'None selected';
  }
}
